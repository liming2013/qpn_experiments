<?xml version="1.0" encoding="UTF-8"?>
<model version="3.2.2">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="PhaseDetector" superclass="qpn::QMActive">
   <statechart>
    <initial target="../1">
     <initial_glyph conn="3,3,5,0,15,3">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="NOT_LOCKED">
     <entry>QActive_arm((QActive *)me, BINNING_PERIOD_MS);</entry>
     <exit>QActive_disarm((QActive *)me);</exit>
     <tran trig="SAMPLE_READY">
      <action>BSP_binning(Q_PAR(me));</action>
      <tran_glyph conn="6,15,3,-1,21">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT">
      <choice target="../../../2">
       <guard>BSP_convolution()</guard>
       <choice_glyph conn="29,20,5,3,27">
        <action box="0,-2,14,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <action>QActive_arm((QActive *)me, BINNING_PERIOD_MS);</action>
       <choice_glyph conn="29,20,4,-1,6">
        <action box="-5,3,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="6,20,3,-1,23">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,6,39,24">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="LOCKED">
     <entry>QActive_arm((QActive *)me, PHASE_UPDATE_MS);</entry>
     <exit>QActive_disarm((QActive *)me);</exit>
     <tran trig="SAMPLE_READY">
      <action>BSP_binning(Q_PAR(me));
BSP_decoding(Q_PAR(me));</action>
      <tran_glyph conn="94,24,1,-1,-23">
       <action box="-14,-2,13,2"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT">
      <choice>
       <guard>BSP_convolution()</guard>
       <action>QActive_arm((QActive *)me, PHASE_UPDATE_MS);</action>
       <choice_glyph conn="76,15,5,-1,-12">
        <action box="1,0,14,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../1">
       <guard>else</guard>
       <choice_glyph conn="76,15,4,1,-2,-31">
        <action box="0,2,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="94,15,1,-1,-18">
       <action box="-13,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="56,7,38,23">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="101,53"/>
   </statechart>
  </class>
  <class name="Decoder" superclass="qpn::QMActive">
   <statechart>
    <initial target="../1">
     <initial_glyph conn="6,6,5,0,12,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="LOCKING">
     <entry>BSP_dispClear();</entry>
     <tran trig="PHASE_UPDATE">
      <action>BSP_dispLocking();</action>
      <tran_glyph conn="6,18,3,-1,17">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DCF_DATA" target="../../2">
      <tran_glyph conn="36,16,1,3,20">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="6,10,30,19">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="SYNCING">
     <entry>BSP_dispClear();</entry>
     <tran trig="DCF_DATA">
      <choice target="../../../3">
       <guard>BSP_dispSyncing(Q_PAR(me)) != 0xFF</guard>
       <choice_glyph conn="72,20,4,0,18,-19,3">
        <action box="1,2,10,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <choice_glyph conn="72,20,5,-1,7">
        <action box="1,-2,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="56,20,3,-1,16">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="PHASE_UPDATE">
      <tran_glyph conn="56,22,3,-1,9">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="56,10,33,19">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state name="DECODING">
     <entry>BSP_dispClear();</entry>
     <tran trig="DCF_DATA">
      <choice>
       <guard>else</guard>
       <choice_glyph conn="49,49,5,-1,-9">
        <action box="-8,0,10,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../2">
       <guard>BSP_dispDecoding(Q_PAR(me)) == 0xFF</guard>
       <choice_glyph conn="49,49,4,3,-25,7">
        <action box="-10,-5,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="59,54,1,-1,-10,-5">
       <action box="-9,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="29,41,30,18">
      <entry box="1,2,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="106,63"/>
   </statechart>
  </class>
  <class name="LEDPulser" superclass="qpn::QMActive">
   <statechart>
    <initial target="../1">
     <initial_glyph conn="9,5,5,0,16,5">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="IDLE">
     <tran trig="LED_PULSE" target="../../2">
      <tran_glyph conn="29,10,0,0,-5,39,5">
       <action box="4,-5,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="11,10,32,24"/>
    </state>
    <state name="ACTIVE">
     <entry>QActive_arm((QActive *)me, LED_PULSE_MS);
BSP_LEDPulse(Q_PAR(me));</entry>
     <exit>QActive_disarm((QActive *)me);
BSP_LEDPulse(3);</exit>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="93,24,1,1,-50">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="58,10,35,24">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="102,51"/>
   </statechart>
  </class>
  <attribute name="AO_PhaseDetector" type="QMActive *const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Decoder" type="QMActive *const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_LEDPulser" type="QMActive *const" visibility="0x00" properties="0x00"/>
  <operation name="PhaseDetector_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>QMActive_ctor(&amp;AO_PhaseDetector.super, Q_STATE_CAST(&amp;PhaseDetector_initial));</code>
  </operation>
  <operation name="Decoder_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>QMActive_ctor(&amp;AO_Decoder.super, Q_STATE_CAST(&amp;Decoder_initial));</code>
  </operation>
  <operation name="LEDPulser_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>QMActive_ctor(&amp;AO_LEDPulser.super, Q_STATE_CAST(&amp;LEDPulser_initial));</code>
  </operation>
  <directory name=".">
   <file name="phase_detector.h">
    <text>#ifndef __PHASE_DETECTOR_H__
#define __PHASE_DETECTOR_H__

enum PhaseDetectorSignals {
    SAMPLE_READY_SIG = Q_USER_SIG,
    PHASE_UPDATE_SIG,
    DCF_DATA_SIG,
    LED_PULSE_SIG
};

// active objects ................................................*/
$declare(AOs::PhaseDetector_ctor)

extern struct PhaseDetector AO_PhaseDetector;

#endif /* __PHASE_DETECTOR_H__ */</text>
   </file>
   <file name="phase_detector.c">
    <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;phase_detector.h&quot;

/*Q_DEFINE_THIS_FILE*/

#define PAUSE_MS             (BSP_TICKS_PER_SEC / 10)
#define BINNING_PERIOD_MS    (BSP_TICKS_PER_SEC / 10)
#define PHASE_UPDATE_MS      (BSP_TICKS_PER_SEC * 5)

/* PhaseDetector class declaration -----------------------------------------------*/
$declare(AOs::PhaseDetector)

/* Global objects ----------------------------------------------------------*/
PhaseDetector AO_PhaseDetector;

/* Blink class definition --------------------------------------------------*/
$define(AOs::PhaseDetector_ctor)
$define(AOs::PhaseDetector)</text>
   </file>
   <file name="main.c">
    <text>#include &quot;qpn_port.h&quot;           /* QP-nano port */
#include &quot;bsp.h&quot;                /* Board Support Package (BSP) */
#include &quot;phase_detector.h&quot;
#include &quot;decoder.h&quot;
#include &quot;led_pulser.h&quot;

/*..........................................................................*/
static QEvt l_dcf77Queue[2];

/* QF_active[] array defines all active object control blocks --------------*/
QActiveCB const Q_ROM Q_ROM_VAR QF_active[] = {
    { (QActive *)0,           (QEvt *)0,      0                         },
    { (QActive *)&amp;AO_LEDPulser, l_dcf77Queue, Q_DIM(l_dcf77Queue)       },
    { (QActive *)&amp;AO_Decoder, l_dcf77Queue, Q_DIM(l_dcf77Queue)         },
    { (QActive *)&amp;AO_PhaseDetector, l_dcf77Queue, Q_DIM(l_dcf77Queue)   },
};

/* make sure that the QF_active[] array matches QF_MAX_ACTIVE in qpn_port.h */
Q_ASSERT_COMPILE(QF_MAX_ACTIVE == Q_DIM(QF_active) - 1);

/*..........................................................................*/
int main(void)
{
    PhaseDetector_ctor();    /* instantiate the PhaseDetector AO */
    Decoder_ctor();
    LEDPulser_ctor();
    BSP_init();              /* initialize the board */

    return QF_run();         /* transfer control to QF-nano */
}</text>
   </file>
   <file name="decoder.h">
    <text>#ifndef __DECODER_H__
#define __DECODER_H__

// active objects ................................................*/
$declare(AOs::Decoder_ctor)

extern struct Decoder AO_Decoder;

#endif /* __DECODER_H__ */</text>
   </file>
   <file name="decoder.c">
    <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;decoder.h&quot;
#include &quot;phase_detector.h&quot;

/*Q_DEFINE_THIS_FILE*/

/* PhaseDetector class declaration -----------------------------------------------*/
$declare(AOs::Decoder)

/* Global objects ----------------------------------------------------------*/
Decoder AO_Decoder;

/* Blink class definition --------------------------------------------------*/
$define(AOs::Decoder_ctor)
$define(AOs::Decoder)</text>
   </file>
   <file name="led_pulser.h">
    <text>#ifndef __LED_PULSER_H__
#define __LED_PULSER_H__

// active objects ................................................*/
$declare(AOs::LEDPulser_ctor)

extern struct LEDPulser AO_LEDPulser;

#endif /* __LED_PULSER_H__ */</text>
   </file>
   <file name="led_pulser.c">
    <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;led_pulser.h&quot;
#include &quot;phase_detector.h&quot;

/*Q_DEFINE_THIS_FILE*/

#define LED_PULSE_MS             (BSP_TICKS_PER_SEC / 2)

/* LEDPulser class declaration -----------------------------------------------*/
$declare(AOs::LEDPulser)

/* Global objects ----------------------------------------------------------*/
LEDPulser AO_LEDPulser;

/* Blink class definition --------------------------------------------------*/
$define(AOs::LEDPulser_ctor)
$define(AOs::LEDPulser)</text>
   </file>
  </directory>
 </package>
</model>

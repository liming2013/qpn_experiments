<?xml version="1.0" encoding="UTF-8"?>
<model version="3.0.1">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Capstone" superclass="qpn::QActive">
   <attribute name="heartbeat_led_sel" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="depth_in_mm" type="int32_t" visibility="0x02" properties="0x00"/>
   <attribute name="depth_units[2]" type="char" visibility="0x02" properties="0x00"/>
   <attribute name="dt_tts_sel" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="ascent_rate_in_mm_per_sec" type="int32_t" visibility="0x02" properties="0x00"/>
   <attribute name="start_dive_time_in_ticks" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="dive_time_in_ticks" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="tts_in_ticks" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="gas_in_cylinder_in_cl" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="consumed_gas_in_cl" type="uint32_t" visibility="0x02" properties="0x00"/>
   <operation name="display_depth" type="void" visibility="0x02" properties="0x00">
    <code>int32_t displayed_depth;

if (me-&gt;depth_units[0] == 'm') {                        /* show meters? */
    displayed_depth = (me-&gt;depth_in_mm + 1000/2) / 1000;
}
else {                                                     /* show feet */
    displayed_depth = (me-&gt;depth_in_mm * 328 + 100000/2) / 100000;
}

if (displayed_depth &gt; 999) {             /* clamp the depth to 3 digits */
    displayed_depth = 999;
}

BSP_lcdStr(LCD_DEPTH_X + 4,  LCD_DEPTH_Y, bin2dec3(displayed_depth));
BSP_lcdStr(LCD_DEPTH_UNITS_X, LCD_DEPTH_Y, me-&gt;depth_units);</code>
   </operation>
   <operation name="display_pressure" type="void" visibility="0x02" properties="0x00">
    <code>uint32_t cylinder_pressure_in_bar =
         1 + (me-&gt;gas_in_cylinder_in_cl / CYLINDER_VOLUME_IN_CL);
BSP_progressBar(LCD_CP_X, LCD_CP_Y,
        (cylinder_pressure_in_bar * LCD_PRESSURE_LIMIT
             / FULL_SCALE_CYLINDER_PRESSURE),
        LCD_PRESSURE_LIMIT, PROGRESS_BAR_LEN);</code>
   </operation>
   <operation name="display_assent" type="void" visibility="0x02" properties="0x00">
    <code>if (me-&gt;ascent_rate_in_mm_per_sec &gt; 0) {                  /* ascending? */
        BSP_progressBar(LCD_AR_X, LCD_AR_Y,
            (me-&gt;ascent_rate_in_mm_per_sec * LCD_ASCENT_RATE_LIMIT)
                / FULL_SCALE_ASCENT_RATE,
            LCD_ASCENT_RATE_LIMIT, PROGRESS_BAR_LEN);
}
else {                          /* descending--show empty ascending bar */
        BSP_progressBar(LCD_AR_X, LCD_AR_Y, 0, LCD_ASCENT_RATE_LIMIT,
            PROGRESS_BAR_LEN);
}</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>me-&gt;depth_units[0]        = 'm';                              /* meters */
me-&gt;depth_units[1]        = '\0';                     /* zero terminate */
me-&gt;gas_in_cylinder_in_cl = 0;
me-&gt;heartbeat_led_sel = 0;
me-&gt;dt_tts_sel            = 0;

BSP_lcdStr(LCD_DEPTH_X, LCD_DEPTH_Y, &quot;Dpt&quot;);</action>
     <initial_glyph conn="30,9,5,0,23,5">
      <action box="3,1,4,3"/>
     </initial_glyph>
    </initial>
    <state name="always">
     <initial target="../4">
      <initial_glyph conn="32,20,5,0,11,10">
       <action box="0,-2,6,2"/>
      </initial_glyph>
     </initial>
     <tran trig="HEARTBEAT">
      <action>BSP_ADCstart();
BSP_ledOn(ADC_LED);
if (me-&gt;heartbeat_led_sel) {
    BSP_ledOn(HEARTBEAT_LED);
}
else {
    BSP_ledOff(HEARTBEAT_LED);
}
me-&gt;heartbeat_led_sel = !me-&gt;heartbeat_led_sel;
QActive_arm((QActive *)me, HEARTBEAT_TOUT);</action>
      <tran_glyph conn="4,27,3,-1,21">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DT_TTS">
      <action>if (me-&gt;dt_tts_sel) {
    BSP_lcdStr(LCD_TTS_X, LCD_TTS_Y, &quot;TTS&quot;);
    BSP_lcdStr(LCD_TTS_X + 3, LCD_TTS_Y,
        ticks2min_sec(me-&gt;tts_in_ticks));
}
else {
    BSP_lcdStr(LCD_TTS_X, LCD_TTS_Y, &quot;Div&quot;);
    BSP_lcdStr(LCD_TTS_X + 3, LCD_TTS_Y,
        ticks2min_sec(me-&gt;dive_time_in_ticks));
}
me-&gt;dt_tts_sel = !me-&gt;dt_tts_sel;</action>
      <tran_glyph conn="86,27,1,-1,-19">
       <action box="-11,0,11,2"/>
      </tran_glyph>
     </tran>
     <tran trig="BTN2_DOWN">
      <action>if (me-&gt;depth_units[0] == 'm') {
    me-&gt;depth_units[0] = 'f';
}
else {
    me-&gt;depth_units[0] = 'm';
}
Capstone_display_depth(me);</action>
      <tran_glyph conn="86,46,1,-1,-16">
       <action box="-13,0,12,2"/>
      </tran_glyph>
     </tran>
     <state name="surfaced">
      <entry>BSP_ledOn(SURFACE_LED);
me-&gt;depth_in_mm = 0;
Capstone_display_depth(me);
me-&gt;dive_time_in_ticks = 0;
me-&gt;tts_in_ticks = 0;
me-&gt;ascent_rate_in_mm_per_sec = 0;
Capstone_display_assent(me);</entry>
      <exit>BSP_ledOff(SURFACE_LED);</exit>
      <tran trig="BTN1_UP">
       <action>Capstone_display_pressure(me);</action>
       <tran_glyph conn="8,39,3,-1,30">
        <action box="0,-2,25,4"/>
       </tran_glyph>
      </tran>
      <tran trig="BTN1_DOWN" target="../3">
       <tran_glyph conn="8,46,3,0,21,3">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ASCENT_RATE_ADC">
       <action>BSP_ledOff(ADC_LED);

me-&gt;ascent_rate_in_mm_per_sec =
    ASCENT_RATE_MM_PER_MIN((uint16_t)Q_PAR(me));
</action>
       <choice>
        <guard>me-&gt;ascent_rate_in_mm_per_sec &gt;= 0</guard>
        <action>me-&gt;ascent_rate_in_mm_per_sec = 0;</action>
        <choice_glyph conn="36,71,5,-1,15">
         <action box="1,0,32,4"/>
        </choice_glyph>
       </choice>
       <choice target="../../../5">
        <guard>else</guard>
        <choice_glyph conn="36,71,4,0,8">
         <action box="-6,3,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="8,71,3,-1,28">
        <action box="0,-2,18,2"/>
       </tran_glyph>
      </tran>
      <state name="adding_gas">
       <entry>QActive_arm((QActive *)me, BSP_TICKS_PER_SEC/10);</entry>
       <exit>QActive_disarm((QActive *)me);
Capstone_display_pressure(me);</exit>
       <tran trig="BTN1_UP" target="../..">
        <tran_glyph conn="12,63,3,1,51">
         <action box="0,-2,9,2"/>
        </tran_glyph>
       </tran>
       <tran trig="Q_TIMEOUT">
        <action>if (me-&gt;gas_in_cylinder_in_cl + GAS_INCREMENT_IN_CL
                &lt;= (CYLINDER_VOLUME_IN_CL * FULL_SCALE_CYLINDER_PRESSURE))
{
    me-&gt;gas_in_cylinder_in_cl += GAS_INCREMENT_IN_CL;/* add gas */
    Capstone_display_pressure(me);
}
else {                                  /* the cylinder is full */
    BSP_lcdStr(LCD_CP_X + 2, LCD_CP_Y, &quot;FULL&quot;);
}
QActive_arm((QActive *)me, BSP_TICKS_PER_SEC/10);</action>
        <tran_glyph conn="12,57,3,-1,21">
         <action box="0,-2,12,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="12,49,29,18">
        <entry box="1,2,6,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="8,30,55,47">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="diving">
      <entry>me-&gt;start_dive_time_in_ticks = BSP_get_ticks();</entry>
      <exit>QActive_post((QActive *)&amp;AO_AlarmMgr, ALARM_SILENCE_SIG, ALL_ALARMS);</exit>
      <tran trig="ASCENT_RATE_ADC">
       <action>            BSP_ledOff(ADC_LED);

            me-&gt;ascent_rate_in_mm_per_sec =
                ASCENT_RATE_MM_PER_MIN((uint16_t)Q_PAR(me));

            /* integrate the depth based on the ascent rate */
            me-&gt;depth_in_mm -=
                depth_change_in_mm(me-&gt;ascent_rate_in_mm_per_sec);</action>
       <choice>
        <guard>me-&gt;depth_in_mm &gt; 0</guard>
        <action>                uint32_t consumed_gas_in_cl = gas_rate_in_cl(me-&gt;depth_in_mm);

                if (me-&gt;gas_in_cylinder_in_cl &gt; consumed_gas_in_cl) {
                    me-&gt;gas_in_cylinder_in_cl -= consumed_gas_in_cl;
                }
                else {
                    me-&gt;gas_in_cylinder_in_cl = 0;
                }

                me-&gt;dive_time_in_ticks = BSP_get_ticks()
                                         - me-&gt;start_dive_time_in_ticks;

                me-&gt;tts_in_ticks = me-&gt;depth_in_mm * (60L * BSP_TICKS_PER_SEC)
                                   / ASCENT_RATE_LIMIT;

                Capstone_display_depth(me);
                Capstone_display_assent(me);
                Capstone_display_pressure(me);

                                           /* check the OUT_OF_AIR_ALARM... */
                if (me-&gt;gas_in_cylinder_in_cl &lt;
                    gas_to_surface_in_cl(me-&gt;depth_in_mm) + GAS_SAFETY_MARGIN)
                {
                    QActive_post((QActive *)&amp;AO_AlarmMgr, ALARM_REQUEST_SIG, OUT_OF_AIR_ALARM);
                }
                else {
                    QActive_post((QActive *)&amp;AO_AlarmMgr, ALARM_SILENCE_SIG, OUT_OF_AIR_ALARM);
                }

                                          /* check the ASCENT_RATE_ALARM... */
                if (me-&gt;ascent_rate_in_mm_per_sec &gt; ASCENT_RATE_LIMIT) {
                    QActive_post((QActive *)&amp;AO_AlarmMgr, ALARM_REQUEST_SIG, ASCENT_RATE_ALARM);
                }
                else {
                    QActive_post((QActive *)&amp;AO_AlarmMgr, ALARM_SILENCE_SIG, ASCENT_RATE_ALARM);
                }

                                                /* check the DEPTH_ALARM... */
                if (me-&gt;depth_in_mm &gt; MAXIMUM_DEPTH_IN_MM) {
                    QActive_post((QActive *)&amp;AO_AlarmMgr, ALARM_REQUEST_SIG, DEPTH_ALARM);
                }
                else {
                    QActive_post((QActive *)&amp;AO_AlarmMgr, ALARM_SILENCE_SIG, DEPTH_ALARM);
                }

                return Q_HANDLED();</action>
        <choice_glyph conn="36,87,4,-1,-3,20">
         <action box="3,-2,17,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../4">
        <guard>else</guard>
        <choice_glyph conn="36,87,4,1,9,34,-30,-7">
         <action box="1,5,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="7,87,3,-1,29">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="7,79,59,22">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="4,14,82,89"/>
    </state>
    <state_diagram size="89,105"/>
   </statechart>
  </class>
  <class name="AlarmMgr" superclass="qpn::QActive">
   <attribute name="curr_alarm" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="active_alarms" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="count" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1/2">
     <initial_glyph conn="11,3,5,0,34,30">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="on">
     <tran trig="ALARM_REQUEST">
      <action>uint8_t alarm_type = (uint8_t)Q_PAR(me);</action>
      <choice>
       <guard>me-&gt;active_alarms &amp; _BV(alarm_type)</guard>
       <choice_glyph conn="72,17,5,-1,-19">
        <action box="-19,0,18,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../3">
       <guard>else</guard>
       <action>me-&gt;active_alarms |= _BV(alarm_type);
me-&gt;curr_alarm = getBitPosition(me-&gt;active_alarms);</action>
       <choice_glyph conn="72,17,5,0,9,16">
        <action box="2,6,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="120,13,1,-1,-48,4">
       <action box="-15,-2,15,2"/>
      </tran_glyph>
     </tran>
     <tran trig="ALARM_SILENCE">
      <action>uint8_t alarm_type = (uint8_t)Q_PAR(me);</action>
      <choice target="../../2">
       <guard>alarm_type == ALL_ALARMS</guard>
       <action>me-&gt;active_alarms = 0;</action>
       <choice_glyph conn="23,19,5,0,10,14">
        <action box="10,2,5,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <action>me-&gt;active_alarms &amp;= ~_BV(alarm_type);</action>
       <choice target="../../../2">
        <guard>me-&gt;active_alarms == 0</guard>
        <choice_glyph conn="23,25,5,0,-9,8">
         <action box="1,0,6,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard>else</guard>
        <action>alarm_type = getBitPosition(me-&gt;active_alarms);</action>
        <choice target="../../../../3">
         <guard>me-&gt;curr_alarm != alarm_type</guard>
         <action>me-&gt;curr_alarm = alarm_type;</action>
         <choice_glyph conn="56,36,5,3,8,8,2">
          <action box="1,0,6,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard>else</guard>
         <choice_glyph conn="56,36,4,-1,12">
          <action box="-4,4,6,2"/>
         </choice_glyph>
        </choice>
        <choice_glyph conn="23,25,5,-1,33,11">
         <action box="27,0,7,2"/>
        </choice_glyph>
       </choice>
       <choice_glyph conn="23,19,4,-1,6">
        <action box="-5,2,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="5,19,3,-1,18">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <state name="silent">
      <entry>BSP_ledOff(BUZZER);
me-&gt;curr_alarm = 0;
me-&gt;active_alarms = 0;</entry>
      <state_glyph node="8,33,41,26">
       <entry box="1,2,7,2"/>
      </state_glyph>
     </state>
     <state name="playing">
      <entry>me-&gt;count = 0;</entry>
      <initial target="../1">
       <initial_glyph conn="85,36,5,0,-7,1">
        <action box="0,-2,6,2"/>
       </initial_glyph>
      </initial>
      <state name="beep">
       <entry>BSP_ledOn(BUZZER);
QActive_arm((QActive *)me, SHORT_PULSE);</entry>
       <exit>QActive_disarm((QActive *)me);</exit>
       <tran trig="Q_TIMEOUT">
        <action>++me-&gt;count;</action>
        <choice target="../../../3">
         <guard>me-&gt;count == me-&gt;curr_alarm</guard>
         <choice_glyph conn="86,56,4,0,-18,28,2">
          <action box="0,-9,6,2"/>
         </choice_glyph>
        </choice>
        <choice target="../../../2">
         <guard>else</guard>
         <choice_glyph conn="86,56,5,3,3,-4,2">
          <action box="0,-3,6,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="69,56,3,-1,17">
         <action box="0,-2,12,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="69,37,12,28">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="off">
       <entry>BSP_ledOff(BUZZER);
QActive_arm((QActive *)me, SHORT_PULSE);</entry>
       <exit>QActive_disarm((QActive *)me);</exit>
       <tran trig="Q_TIMEOUT" target="../../1">
        <tran_glyph conn="104,62,1,3,-35">
         <action box="-10,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="91,40,13,25">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="long_off">
       <entry>BSP_ledOff(BUZZER);
QActive_arm((QActive *)me, LONG_PULSE);</entry>
       <exit>QActive_disarm((QActive *)me);</exit>
       <tran trig="Q_TIMEOUT" target="../../1">
        <action>me-&gt;count = 0;</action>
        <tran_glyph conn="117,48,1,3,-48">
         <action box="-10,-2,11,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="106,40,11,25">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="66,33,53,39">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="5,8,115,68"/>
    </state>
    <state_diagram size="122,80"/>
   </statechart>
  </class>
  <attribute name="AO_capstone" type="QActive *const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_AlarmMgr" type="QActive *const" visibility="0x00" properties="0x00"/>
  <operation name="Capstone_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>QActive_ctor(&amp;AO_Capstone.super, Q_STATE_CAST(&amp;Capstone_initial));</code>
  </operation>
  <operation name="AlarmMgr_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>constructor</documentation>
   <code>QActive_ctor(&amp;AO_AlarmMgr.super, Q_STATE_CAST(&amp;AlarmMgr_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="main.c">
   <text>#include &quot;qpn_port.h&quot;   /* QP-nano port */
#include &quot;bsp.h&quot;        /* Board Support Package (BSP) */
#include &quot;capstone.h&quot;
#include &quot;alarm.h&quot;
/*..........................................................................*/
static QEvt l_capstoneQueue[5];
static QEvt l_alarmQueue[5];

/* QF_active[] array defines all active object control blocks --------------*/
QActiveCB const Q_ROM Q_ROM_VAR QF_active[] = {
    { (QActive *)0,           (QEvt *)0,      0                            },
    { (QActive *)&amp;AO_Capstone, l_capstoneQueue, Q_DIM(l_capstoneQueue)     },
    { (QActive *)&amp;AO_AlarmMgr, l_alarmQueue, Q_DIM(l_alarmQueue)           }

};

/* make sure that the QF_active[] array matches QF_MAX_ACTIVE in qpn_port.h */
Q_ASSERT_COMPILE(QF_MAX_ACTIVE == Q_DIM(QF_active) - 1);

/*..........................................................................*/
int main(void)
{
    Capstone_ctor();
    AlarmMgr_ctor();
    BSP_init();      /* initialize the board */

    return QF_run(); /* transfer control to QF-nano */
}</text>
  </file>
  <file name="capstone.c">
   <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;capstone.h&quot;
#include &quot;alarm.h&quot;

#ifndef NDEBUG
Q_DEFINE_THIS_FILE
#endif

/* Pelican class declaration -----------------------------------------------*/
$declare(AOs::Capstone)

/* Global objects ----------------------------------------------------------*/
Capstone AO_Capstone;

/* Capstone class definition -----------------------------------------------*/
$define(AOs::Capstone_ctor)
$define(AOs::Capstone)</text>
  </file>
  <file name="capstone.h">
   <text>#ifndef __CAPSTONE_H__
#define __CAPSTONE_H__

#include &quot;helpers.h&quot;
#include &quot;scuba.h&quot;

#define MID_A2D_SCALE           511

#define LCD_AR_X                1
#define LCD_AR_Y                1

#define HEARTBEAT_TOUT           BSP_TICKS_PER_SEC/2
#define DT_TTS_TOUT              BSP_TICKS_PER_SEC*2

#define ADC_CHANNEL    0
#define ADC_LED        0     //RED
#define HEARTBEAT_LED  4     //GREEN
#define SURFACE_LED    1     //YELLOW
#define BUZZER         7

#define LCD_DEPTH_Y             1
#define LCD_DEPTH_X             9

#define LCD_TTS_Y               2
#define LCD_TTS_X               9

#define LCD_CP_Y                2
#define LCD_CP_X                1

#define LCD_DEPTH_UNITS_X       16

#define PROGRESS_BAR_LEN        8

#define MAXIMUM_DEPTH_IN_MM     (40L*1000L)
#define CYLINDER_VOLUME_IN_CL   (10L*100L)
#define FULL_SCALE_ASCENT_RATE  (40L*1000L)
#define FULL_SCALE_CYLINDER_PRESSURE   200

#define LCD_PRESSURE_LIMIT      40
#define LCD_ASCENT_RATE_LIMIT   40

#define LCD_ASCENT_RATE_LIMIT   40

#define GAS_SAFETY_MARGIN  \
    ((CYLINDER_VOLUME_IN_CL * FULL_SCALE_CYLINDER_PRESSURE) / 5)

#define GAS_INCREMENT_IN_CL      2000

/** conversion from raw A2D reading to ascent/descent rate in mm/min */
#define ASCENT_RATE_MM_PER_MIN(raw_) \
    (int32_t)((((int32_t)(raw_) - MID_A2D_SCALE) * FULL_SCALE_ASCENT_RATE) \
              / MID_A2D_SCALE)

enum CapstoneSignals {
    BTN1_DOWN_SIG = Q_USER_SIG,
    BTN1_UP_SIG,
    BTN2_DOWN_SIG,
    BTN2_UP_SIG,
    HEARTBEAT_SIG,
    DT_TTS_SIG,
    ASCENT_RATE_ADC_SIG,
    ALARM_REQUEST_SIG,
    ALARM_SILENCE_SIG
};

enum AlarmTypes {          /* arranged in ascending order of alarm priority */
    ALL_ALARMS,
    DEPTH_ALARM,
    ASCENT_RATE_ALARM,
    OUT_OF_AIR_ALARM,
    MAX_ALARM                                           /* keep always last */
};

// active objects ................................................*/
$declare(AOs::Capstone_ctor)

extern struct CapstoneTag AO_Capstone;

#endif /* __CAPSTONE_H__ */</text>
  </file>
  <file name="alarm.h">
   <text>#ifndef __ALARM_H__
#define __ALARM_H__

#define SHORT_PULSE    BSP_TICKS_PER_SEC/10
#define LONG_PULSE     BSP_TICKS_PER_SEC

// active objects ................................................*/
$declare(AOs::AlarmMgr_ctor)

extern struct AlarmMgrTag AO_AlarmMgr;

#endif</text>
  </file>
  <file name="alarm.c">
   <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;capstone.h&quot;
#include &quot;alarm.h&quot;

#ifndef NDEBUG
Q_DEFINE_THIS_FILE
#endif

int getBitPosition(uint8_t b) {
    uint8_t i;

    for(i=7; i&gt;=0;i--)
    {
        if(b &amp; _BV(i))
            return i;
    }
    return -1;

}

/* Pelican class declaration -----------------------------------------------*/
$declare(AOs::AlarmMgr)

/* Global objects ----------------------------------------------------------*/
AlarmMgr AO_AlarmMgr;

/* Capstone class definition -----------------------------------------------*/
$define(AOs::AlarmMgr_ctor)
$define(AOs::AlarmMgr)</text>
  </file>
 </directory>
</model>
